name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
        
      - name: Check TypeScript compilation
        run: npx tsc --noEmit

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false

  build-angular:
    name: Build Angular Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Build production bundle
        run: npm run build-prod
        
      - name: Verify build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -la dist/xregistry-viewer/
          test -f dist/xregistry-viewer/index.html || exit 1
          echo "✓ Build artifacts verified"
          
      - name: Check bundle sizes
        run: |
          echo "Bundle size analysis:"
          du -sh dist/xregistry-viewer/
          find dist/xregistry-viewer/ -name "*.js" -exec du -h {} \; | sort -h
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angular-build
          path: dist/xregistry-viewer/
          retention-days: 7

  build-server:
    name: Build Express Server
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Verify server.js exists
        run: |
          test -f server.js || exit 1
          echo "✓ server.js found"
          
      - name: Check server.js syntax
        run: node --check server.js
        
      - name: List production dependencies
        run: |
          echo "Production dependencies for server:"
          npm ls express compression --prod || true

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-angular, build-server]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: xregistry-viewer:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          
      - name: Inspect Docker image
        run: |
          echo "Docker image details:"
          docker images xregistry-viewer:test
          docker inspect xregistry-viewer:test --format='Size: {{.Size}} bytes'
          
      - name: Start Docker container
        run: |
          docker run -d --name xregistry-test -p 4000:4000 xregistry-viewer:test
          echo "Waiting for container to start..."
          sleep 10
          
      - name: Check container health
        run: |
          docker ps -a
          docker logs xregistry-test
          
      - name: Verify container is running
        run: |
          if ! docker ps | grep -q xregistry-test; then
            echo "❌ Container is not running"
            docker logs xregistry-test
            exit 1
          fi
          echo "✓ Container is running"

  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [build-docker]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: xregistry-viewer:test
          cache-from: type=gha
          load: true
          
      - name: Start Docker container
        run: |
          docker run -d --name xregistry-test -p 4000:4000 xregistry-viewer:test
          echo "Waiting for server to be ready..."
          timeout 60 bash -c 'until curl -sf http://localhost:4000/health > /dev/null; do sleep 2; done' || {
            echo "❌ Server failed to start within 60 seconds"
            docker logs xregistry-test
            exit 1
          }
          echo "✓ Server is ready"
          
      - name: Test health endpoint
        run: |
          echo "Testing /health endpoint..."
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:4000/health)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Health check failed with status $HTTP_CODE"
            exit 1
          fi
          
          if ! echo "$BODY" | jq -e '.status == "ok"' > /dev/null 2>&1; then
            echo "❌ Invalid health response"
            exit 1
          fi
          
          echo "✓ Health endpoint OK"
          
      - name: Test main application endpoint
        run: |
          echo "Testing main application endpoint..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/)
          
          echo "HTTP Status: $HTTP_CODE"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Main endpoint failed with status $HTTP_CODE"
            exit 1
          fi
          
          echo "✓ Main endpoint OK"
          
      - name: Test config.json endpoint
        run: |
          echo "Testing /config.json endpoint..."
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:4000/config.json)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Config endpoint failed with status $HTTP_CODE"
            exit 1
          fi
          
          if ! echo "$BODY" | jq -e 'type == "object"' > /dev/null 2>&1; then
            echo "❌ Invalid JSON response"
            exit 1
          fi
          
          echo "✓ Config endpoint OK"
          
      - name: Test static files
        run: |
          echo "Testing static file serving..."
          
          # Test a few common files
          for file in "favicon.ico" "favicon.svg"; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/$file)
            echo "$file: $HTTP_CODE"
            
            if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "304" ]; then
              echo "⚠️  Warning: $file returned $HTTP_CODE"
            fi
          done
          
          echo "✓ Static file serving OK"
          
      - name: Test compression
        run: |
          echo "Testing gzip compression..."
          RESPONSE=$(curl -s -H "Accept-Encoding: gzip" -I http://localhost:4000/)
          
          if echo "$RESPONSE" | grep -i "content-encoding: gzip"; then
            echo "✓ Gzip compression enabled"
          else
            echo "⚠️  Warning: Gzip compression not detected"
          fi
          
      - name: Test proxy endpoint (basic)
        run: |
          echo "Testing proxy endpoint..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:4000/proxy?target=https://httpbin.org/status/200")
          
          echo "Proxy HTTP Status: $HTTP_CODE"
          
          # Proxy should return 200 or might fail without proper CORS, that's okay for smoke test
          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "400" ]; then
            echo "✓ Proxy endpoint responding"
          else
            echo "⚠️  Warning: Unexpected proxy status $HTTP_CODE"
          fi
          
      - name: Check server logs for errors
        if: always()
        run: |
          echo "Checking server logs for errors..."
          docker logs xregistry-test 2>&1 | grep -i "error" || echo "No errors found in logs"
          
      - name: Display final status
        if: always()
        run: |
          echo ""
          echo "==================================="
          echo "      SMOKE TEST RESULTS"
          echo "==================================="
          docker ps -a | grep xregistry-test || true
          echo ""
          echo "Last 20 lines of logs:"
          docker logs --tail 20 xregistry-test
          
      - name: Cleanup
        if: always()
        run: |
          docker stop xregistry-test || true
          docker rm xregistry-test || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: Check for known vulnerabilities
        run: |
          npm install -g snyk
          snyk test --severity-threshold=high || true
        continue-on-error: true

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build-angular, build-server, build-docker, smoke-test, security-scan]
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "==================================="
          echo "   CI/CD PIPELINE SUMMARY"
          echo "==================================="
          echo ""
          echo "✓ Lint: ${{ needs.lint.result }}"
          echo "✓ Test: ${{ needs.test.result }}"
          echo "✓ Build Angular: ${{ needs.build-angular.result }}"
          echo "✓ Build Server: ${{ needs.build-server.result }}"
          echo "✓ Build Docker: ${{ needs.build-docker.result }}"
          echo "✓ Smoke Tests: ${{ needs.smoke-test.result }}"
          echo "✓ Security Scan: ${{ needs.security-scan.result }}"
          echo ""
          
          if [ "${{ needs.smoke-test.result }}" != "success" ]; then
            echo "❌ Pipeline failed at smoke tests"
            exit 1
          fi
          
          if [ "${{ needs.build-docker.result }}" != "success" ]; then
            echo "❌ Pipeline failed at Docker build"
            exit 1
          fi
          
          echo "✅ All critical checks passed!"
